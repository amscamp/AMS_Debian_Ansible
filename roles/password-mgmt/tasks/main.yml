---


- name: install pass
  apt:
    state: latest
    name: "{{ item }}" 
  loop:
    - pass
    - pwgen
    - rng-tools
    - gnupg
    - acl

- name: Check if .password-store exists
  stat:
    path: "{{ wallet_userhome }}/.password-store"
  register: password_store_exists


- name: Ensure .gnupg config directory exists with right permissions
  ansible.builtin.file:
    dest: "{{ wallet_userhome }}/.gnupg"
    state: directory
    mode: "0700"
    owner: "{{ wallet_username }}"
  when: not password_store_exists.stat.exists

- name: Set default gpg options
  ansible.builtin.template:
    src: "gpg.conf.j2"
    dest: "{{ wallet_userhome }}/.gnupg/gpg.conf"
    mode: "0600"
    owner: "{{ wallet_username }}"
  when: not password_store_exists.stat.exists

- name: Copy default template for gpg key generation
  ansible.builtin.template:
    src: "gen-key-script.j2"
    dest: "{{ wallet_userhome }}/.gnupg/gen-key-script-{{ wallet_username }}"
    mode: "0600"
    owner: "{{ wallet_username }}"
  when: not password_store_exists.stat.exists

- name: GnuPG 2.1 | Enable loopback pinentry mode in gpg-agent.conf
  ansible.builtin.lineinfile:
    dest: "{{ wallet_userhome }}/.gnupg/gpg-agent.conf"
    owner: "{{ wallet_username }}"
    mode: '0600'
    regexp: "{{ item.re }}"
    line: "{{ item.l }}"
    create: yes
  with_items:
    - { re: '^allow-loopback-pinentry', l: 'allow-loopback-pinentry' }
  when: not password_store_exists.stat.exists

- name: Generate gpg key 
  ansible.builtin.command: "gpg --batch --gen-key {{ wallet_userhome }}/.gnupg/gen-key-script-{{ wallet_username }}"
  args:
    chdir: "{{ wallet_userhome }}"
  when: not password_store_exists.stat.exists
  register: genkey
 
- name: GPG2.1+ | import generated keys  
  ansible.builtin.command: "gpg --import {{ wallet_userhome }}/{{ gpg_pubkeyfile }}"
  when: not password_store_exists.stat.exists

- name: Get user gpg fingerprint
  ansible.builtin.shell: |
    set -o pipefail
    gpg --list-keys --keyid-format LONG {{ gpg_useremail }} | awk -F'[ /]' '/sub/ { print $5 }' | tee {{ wallet_userhome }}/{{ gpg_fingerprint }}
  args:
    executable: /bin/bash
  register: gpg_user_fingerprint
  when: not password_store_exists.stat.exists

- name: GPG2.1+ | trust imported key
  ansible.builtin.shell: (echo 5; echo y; echo save) | gpg --command-fd 0 --no-tty --no-greeting -q --edit-key "$(cat {{ wallet_userhome }}/{{ gpg_fingerprint }})" trust 
  args:
    executable: /bin/bash
  when: not password_store_exists.stat.exists


- name: pass init
  ansible.builtin.shell: echo $PWD && pass init $(cat {{ wallet_userhome }}/{{ gpg_fingerprint }})
  environment:
    HOME: "{{ wallet_userhome }}"
  register: passinit
  when: not password_store_exists.stat.exists

# - name: debug
#   debug:
#     msg: "{{passinit.stdout}}"

- name: Ensure {{ passwd_folder }} exists
  ansible.builtin.file:
    dest: "{{ wallet_userhome }}/.password-store/{{ passwd_folder }}"
    state: directory
    mode: "0700"
    owner: "{{ wallet_username }}"
  when: not password_store_exists.stat.exists

- name: get wallet folder entrys
  shell: pass ls {{ passwd_folder }}
  environment:
    HOME: "{{ wallet_userhome }}"
  register: wallet_entrys

- name: create wallet entrys if they not exist
  shell: echo "{{ item.value }}" | pass insert -e {{ passwd_folder }}/{{ item.key }}
  environment:
    HOME: "{{ wallet_userhome }}"
  when: not wallet_entrys.stdout is search(item.key)
  loop: "{{default_entries}}"


- name: get wallet folder entrys
  shell: pass ls {{ passwd_folder }}
  environment:
    HOME: "{{ wallet_userhome }}"
  register: wallet_entrys

- name: change root password if entry exists
  shell: pass show {{ passwd_folder }}/RootPW | passwd root --stdin
  environment:
    HOME: "{{ wallet_userhome }}"
  when: wallet_entrys.stdout is search("RootPW")


- name: change {{ password_username }} password if entry exists
  shell: pass show {{ passwd_folder }}/UserPW | passwd {{ password_username }} --stdin
  environment:
    HOME: "{{ wallet_userhome }}"
  when: wallet_entrys.stdout is search("UserPW")


# - name: get default enc pw
#   debug:
#     msg: "{{ default_entries | selectattr('key', 'equalto', 'Encryption') | map(attribute='value') | list }}"




# - name: change encryption password if entry exists
#   shell: |
#     mkpipe fifo
#     echo -n "oldpass" | cryptsetup luksAddKey --key-file - test.img fifo &
#     echo -m "newpass" > fifo
  
  
  
  
#   qdbus org.kde.kwalletd5 /modules/kwalletd5 readPassword "$(qdbus org.kde.kwalletd5 /modules/kwalletd5 org.kde.KWallet.open {{ passwd_wallet }} 0 "{{ passwd_folder }}")" "{{ passwd_folder }}" "Encryption" "{{ passwd_folder }}" | passwd {{ password_username }} --stdin
#   when: wallet_entrys.stdout is search("Encryption")


#   sudo cryptsetup luksChangeKey /dev/disk/by-uuid/$(cat /etc/crypttab | sed -e "s|\(.*\) UUID=\(.*\) none.*|\2|g")